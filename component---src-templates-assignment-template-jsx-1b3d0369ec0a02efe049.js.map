{"version":3,"sources":["webpack:///./src/templates/AssignmentTemplate.jsx"],"names":["assignmentStyles","makeStyles","theme","imageShadow","width","boxShadow","shadows","transition","codeStyle","fontSize","lineHeight","pageQuery","AssignmentTemplate","data","markdownRemark","htmlAst","frontmatter","headings","assignmentNumber","assignmentName","submitURL","dueWeek","dueDay","dueTime","requiredPoints","optionalPoints","dimReturnTop","dimReturnBottom","customComponents","td","children","props","variant","component","color","to","withPrefix","img","className","clsx","total","required","optional","dim","dangerouslySetInnerHTML","__html","dimFactor","dueString","semesterOffsetToDateString","title","subtitle","markdown","components"],"mappings":"uaAgBA,IAAMA,EAAmBC,aAAW,SAACC,GAAD,MAAY,CAC5CC,YAAa,CACTC,MAAO,OACPC,UAAcH,EAAMI,QAAQ,GAAnB,cACTC,WACI,+DACJ,UAAW,CACPF,UAAcH,EAAMI,QAAQ,GAAnB,gBAGjBE,UAAW,CACPC,SAAU,GACVC,WAAY,YAsFb,IAAMC,EAAS,YAwBPC,UAzGf,YAAuC,IAAD,IAARC,KACsBC,eAAxCC,EAD0B,EAC1BA,QAASC,EADiB,EACjBA,YAAaC,EADI,EACJA,SAE1BC,EAUAF,EAVAE,iBACAC,EASAH,EATAG,eACAC,EAQAJ,EARAI,UACAC,EAOAL,EAPAK,QACAC,EAMAN,EANAM,OACAC,EAKAP,EALAO,QACAC,EAIAR,EAJAQ,eACAC,EAGAT,EAHAS,eACAC,EAEAV,EAFAU,aACAC,EACAX,EADAW,gBAZ8B,EAcC3B,IAA3BG,EAd0B,EAc1BA,YAAaK,EAda,EAcbA,UAGfoB,EAAmB,CACrBC,GAAI,gBAAGC,EAAH,EAAGA,SAAaC,EAAhB,yBACA,kBAAC,IAAD,eACIC,QAAQ,YACRC,UAAU,KACVC,MAAM,iBACFH,GAEHD,IAGT,kBAAmB,gBAAGA,EAAH,EAAGA,SAAH,OACf,kBAAC,IAAD,CACIK,GAAIC,qBAAW,mBAAmBlB,EAApB,SAEbY,IAGT,cAAe,gBAAGA,EAAH,EAAGA,SAAH,OACX,kBAAC,IAAD,CAAcK,GAAIf,GAAYU,IAElCO,IAAK,gBAAGC,EAAH,EAAGA,UAAcP,EAAjB,0BACD,uCAAKO,UAAWC,YAAKD,EAAWnC,IAAkB4B,KAEtDS,MAAO,kBACH,0BAAMF,UAAW9B,GAAYgB,EAAiBC,IAElDgB,SAAU,kBAAM,0BAAMH,UAAW9B,GAAYgB,IAC7CkB,SAAU,kBAAM,0BAAMJ,UAAW9B,GAAYiB,IAC7CkB,IAAK,kBACD,0BACIL,UAAW9B,EACXoC,wBAAyB,CACrBC,OAAO,QAASnB,EAAeC,EAAzB,QAIlB,mBAAoB,kBAChB,kBAAC,IAAD,CACIH,eAAgBA,EAChBC,eAAgBA,EAChBqB,UAAWpB,EAAeC,MAOhCoB,EAAS,QADFC,YAA2B3B,EAAU,EAAGC,GACtC,OAAsBC,EAGrC,OACI,kBAAC,IAAD,CAAY0B,MAAK,cAAgB/B,GAC7B,kBAAC,IAAD,CACI+B,MAAK,cAAgB/B,EAAhB,KAAqCC,EAC1C+B,SAAUH,EACVI,SAAU,CAAEpC,UAASE,YACrBmC,WAAYxB","file":"component---src-templates-assignment-template-jsx-1b3d0369ec0a02efe049.js","sourcesContent":["// Library imports\nimport React from 'react';\nimport { graphql, withPrefix } from 'gatsby';\nimport clsx from 'clsx';\n// Project imports\nimport {\n    PageLayout,\n    ExternalLink,\n    MarkdownPage,\n    ScoreCalculator,\n} from 'components';\nimport { semesterOffsetToDateString } from 'utils';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst assignmentStyles = makeStyles((theme) => ({\n    imageShadow: {\n        width: '100%',\n        boxShadow: `${theme.shadows[4]} !important`,\n        transition:\n            'box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms !important',\n        '&:hover': {\n            boxShadow: `${theme.shadows[8]} !important`,\n        },\n    },\n    codeStyle: {\n        fontSize: 16,\n        lineHeight: '1rem',\n    },\n}));\n\n// A template that generating assignment specs from markdown content\nfunction AssignmentTemplate({ data }) {\n    const { htmlAst, frontmatter, headings } = data.markdownRemark;\n    const {\n        assignmentNumber,\n        assignmentName,\n        submitURL,\n        dueWeek,\n        dueDay,\n        dueTime,\n        requiredPoints,\n        optionalPoints,\n        dimReturnTop,\n        dimReturnBottom,\n    } = frontmatter;\n    const { imageShadow, codeStyle } = assignmentStyles();\n\n    // Custom components to generate from markdown html\n    const customComponents = {\n        td: ({ children, ...props }) => (\n            <Typography\n                variant='subtitle1'\n                component='td'\n                color='textSecondary'\n                {...props}\n            >\n                {children}\n            </Typography>\n        ),\n        'assignment-link': ({ children }) => (\n            <ExternalLink\n                to={withPrefix(`zips/Assignment-${assignmentNumber}.zip`)}\n            >\n                {children}\n            </ExternalLink>\n        ),\n        'submit-link': ({ children }) => (\n            <ExternalLink to={submitURL}>{children}</ExternalLink>\n        ),\n        img: ({ className, ...props }) => (\n            <img className={clsx(className, imageShadow)} {...props} />\n        ),\n        total: () => (\n            <code className={codeStyle}>{requiredPoints + optionalPoints}</code>\n        ),\n        required: () => <code className={codeStyle}>{requiredPoints}</code>,\n        optional: () => <code className={codeStyle}>{optionalPoints}</code>,\n        dim: () => (\n            <code\n                className={codeStyle}\n                dangerouslySetInnerHTML={{\n                    __html: `&frac${dimReturnTop}${dimReturnBottom};`,\n                }}\n            />\n        ),\n        'score-calculator': () => (\n            <ScoreCalculator\n                requiredPoints={requiredPoints}\n                optionalPoints={optionalPoints}\n                dimFactor={dimReturnTop / dimReturnBottom}\n            />\n        ),\n    };\n\n    // Compute due date string for the assignment\n    const date = semesterOffsetToDateString(dueWeek - 1, dueDay);\n    const dueString = `Due: ${date} at ${dueTime}`;\n\n    // Render\n    return (\n        <PageLayout title={`Assignment ${assignmentNumber}`}>\n            <MarkdownPage\n                title={`Assignment ${assignmentNumber}: ${assignmentName}`}\n                subtitle={dueString}\n                markdown={{ htmlAst, headings }}\n                components={customComponents}\n            />\n        </PageLayout>\n    );\n}\n\n// Query markdown content\nexport const pageQuery = graphql`\n    query($slug: String!) {\n        markdownRemark(fields: { slug: { eq: $slug } }) {\n            htmlAst\n            frontmatter {\n                assignmentName\n                assignmentNumber\n                dueWeek\n                dueDay\n                dueTime\n                submitURL\n                requiredPoints\n                optionalPoints\n                dimReturnTop\n                dimReturnBottom\n            }\n            headings {\n                value\n                depth\n            }\n        }\n    }\n`;\n\nexport default AssignmentTemplate;\n"],"sourceRoot":""}