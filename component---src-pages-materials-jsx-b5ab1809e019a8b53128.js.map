{"version":3,"sources":["webpack:///./src/pages/materials.jsx"],"names":["Materials","site","siteMetadata","courseSettings","semester","firstDayOfSemester","firstLecture","secondLecture","firstDay","Date","computeAndFormatDate","weekNumber","dayOfWeek","dayToNumber","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","dateFormatOptions","timeZone","weekday","month","day","formatDate","date","toLocaleDateString","undefined","result","console","warn","adjustedWeekNumber","setUTCDate","getUTCDate","weekToAssignments","materials","assignments","forEach","assignment","weekIndex","due","week","push","weekToEvents","other","otherEvent","masterSchedule","weekSchedule","firstLectureData","lectures","firstReadingsData","readings","secondLectureData","secondReadingsData","lecture","preceptData","precepts","precept","simplifiedSchedule","map","title","component","paragraph","variant","gutterBottom","schedule"],"mappings":"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","file":"component---src-pages-materials-jsx-b5ab1809e019a8b53128.js","sourcesContent":["// Library imports\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n// Project imports\nimport { PageLayout, Content, MaterialsTable } from 'components';\nimport { materials } from 'content';\n// UI imports\nimport Typography from '@material-ui/core/Typography';\n\nfunction Materials() {\n    // Grab semester and first day of semester\n    const { site } = useStaticQuery(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        courseSettings {\n                            semester\n                            firstDayOfSemester\n                            firstLecture\n                            secondLecture\n                        }\n                    }\n                }\n            }\n        `\n    );\n    const {\n        semester,\n        firstDayOfSemester,\n        firstLecture,\n        secondLecture,\n    } = site.siteMetadata.courseSettings;\n    const firstDay = new Date(`${semester}-${firstDayOfSemester}Z`);\n\n    // Function to compute date from week and day\n    const computeAndFormatDate = (weekNumber, dayOfWeek) => {\n        // String mapping\n        const dayToNumber = {\n            Monday: 0,\n            Tuesday: 1,\n            Wednesday: 2,\n            Thursday: 3,\n            Friday: 4,\n            Saturday: 5,\n            Sunday: 6,\n        };\n\n        // Format function\n        const dateFormatOptions = {\n            timeZone: 'UTC',\n            weekday: 'short',\n            month: 'short',\n            day: 'numeric',\n        };\n        const formatDate = (date) =>\n            date.toLocaleDateString(undefined, dateFormatOptions);\n\n        // Allocate fresh memory for the result\n        const result = new Date(firstDay);\n        // Corner case\n        if (!dayToNumber[dayOfWeek]) {\n            console.warn(`Error: ${dayOfWeek} is not a day of the week`);\n            return formatDate(result);\n        }\n\n        // Compute result\n        let adjustedWeekNumber = weekNumber;\n        if (adjustedWeekNumber > 5) {\n            // Add an extra week for spring break\n            adjustedWeekNumber += 1;\n        }\n        if (adjustedWeekNumber > 12) {\n            // Add an extra week for reading period\n            adjustedWeekNumber += 1;\n        }\n        result.setUTCDate(\n            result.getUTCDate() +\n                7 * adjustedWeekNumber +\n                dayToNumber[dayOfWeek]\n        );\n        return formatDate(result);\n    };\n\n    // Organize assignments and events by week\n    const weekToAssignments = {};\n    materials.assignments.forEach((assignment) => {\n        const { week } = assignment.due;\n        const weekIndex = week - 1;\n        if (!weekToAssignments[weekIndex]) {\n            weekToAssignments[weekIndex] = [];\n        }\n\n        weekToAssignments[weekIndex].push(assignment);\n    });\n    const weekToEvents = {};\n    materials.other.forEach((otherEvent) => {\n        const { week } = otherEvent.due;\n        const weekIndex = week - 1;\n        if (!weekToEvents[weekIndex]) {\n            weekToEvents[weekIndex] = [];\n        }\n\n        weekToEvents[weekIndex].push(otherEvent);\n    });\n\n    // Build semester schedule week by week\n    const masterSchedule = [];\n    for (let week = 0; week < 13; week++) {\n        // Initialize empty schedule for the week\n        const weekSchedule = {\n            Monday: [],\n            Tuesday: [],\n            Wednesday: [],\n            Thursday: [],\n            Friday: [],\n            Saturday: [],\n            Sunday: [],\n        };\n\n        // Lectures take first priority in ordering\n        if (week < 12) {\n            // Extract data\n            const firstLectureData = materials.lectures[2 * week];\n            const firstReadingsData = materials.readings[2 * week];\n            const secondLectureData = materials.lectures[2 * week + 1];\n            const secondReadingsData = materials.readings[2 * week + 1];\n\n            // Add data to schedule\n            if (firstLectureData) {\n                weekSchedule[firstLecture].push({\n                    lecture: firstLectureData,\n                    readings: firstReadingsData,\n                    date: computeAndFormatDate(week, firstLecture),\n                });\n            }\n            if (secondLectureData) {\n                weekSchedule[secondLecture].push({\n                    lecture: secondLectureData,\n                    readings: secondReadingsData,\n                    date: computeAndFormatDate(week, secondLecture),\n                });\n            }\n        }\n\n        // Assignments have second priority\n        if (weekToAssignments[week]) {\n            weekToAssignments[week].forEach((assignment) => {\n                const day = assignment.due.day;\n                const date = computeAndFormatDate(week, day);\n                weekSchedule[day].push({ assignment: assignment, date });\n            });\n        }\n\n        // Precepts have third priority\n        if (week < 12) {\n            const preceptData = materials.precepts[week];\n            if (preceptData) {\n                // Precept appears after last lecture for week\n                weekSchedule[secondLecture].push({\n                    precept: preceptData,\n                    date: `Precept`,\n                });\n            }\n        }\n        masterSchedule.push(weekSchedule);\n\n        // Events have last priority\n        if (weekToEvents[week]) {\n            weekToEvents[week].forEach((otherEvent) => {\n                const day = otherEvent.due.day;\n                const date = computeAndFormatDate(week, day);\n                weekSchedule[day].push({ otherEvent: otherEvent, date });\n            });\n        }\n    }\n\n    // Condense schedule into array of arrays of objects\n    const simplifiedSchedule = masterSchedule.map((week) => {\n        const simplifiedWeek = [\n            ...week.Monday,\n            ...week.Tuesday,\n            ...week.Wednesday,\n            ...week.Thursday,\n            ...week.Friday,\n            ...week.Saturday,\n            ...week.Sunday,\n        ];\n\n        return simplifiedWeek;\n    });\n\n    // Render\n    return (\n        <PageLayout title={'Materials'}>\n            <Content>\n                <Typography component={'section'} paragraph={true}>\n                    <Typography variant='h4' gutterBottom>\n                        {'Materials'}\n                    </Typography>\n                    <MaterialsTable schedule={simplifiedSchedule} />\n                </Typography>\n            </Content>\n        </PageLayout>\n    );\n}\n\nexport default Materials;\n"],"sourceRoot":""}