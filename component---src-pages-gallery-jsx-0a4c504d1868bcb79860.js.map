{"version":3,"sources":["webpack:///./src/assets/gifs/assignments/final_project.gif","webpack:///./src/pages/gallery.jsx","webpack:///./src/assets/gifs/projects/dream_world.gif","webpack:///./src/assets/gifs/assignments/assignment_1.gif","webpack:///./src/assets/gifs/projects/cat_dash.gif","webpack:///./src/assets/gifs/projects/drivers_ed.gif","webpack:///./src/assets/gifs/assignments/assignment_5.gif"],"names":["module","exports","galleryStyles","makeStyles","textOverflow","overflowWrap","pageQuery","Gallery","data","prizes","imageMap","projectImages","nodes","forEach","name","childImageSharp","fluid","gifMap","Object","entries","ProjectGIFs","gif","isWinner","node","frontmatter","instructorAwards","instructorMentions","studentAwards","studentMentions","visibilityCmp","propsA","propsB","visibilityRankA","parseInt","visibilityRank","visibilityRankB","title","projectWinners","projects","edges","filter","sort","projectMentions","project","makeProjects","imageName","fluidImage","gifImage","key","customComponents","td","children","props","variant","component","color","className","img","h3","gutterBottom","id","urlify","student","gallery","place","map","markdown","components"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,6D,0PCiB3C,IAAMC,EAAgBC,aAAW,iBAAO,CACpCC,aAAc,CACVC,aAAc,kBA2Hf,IAAMC,EAAS,aAsDPC,UA5Kf,YAA4B,IAAD,UAARC,EAAQ,EAARA,KAEPJ,EAAiBF,IAAjBE,aAGFK,EAAS,CAAC,KAAM,KAAM,KAAM,KAAM,IAAK,KAGvCC,EAAW,GACjBF,EAAKG,cAAcC,MAAMC,SAAQ,YAAgC,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,gBACtCL,EAASI,GAAQC,EAAgBC,SAErC,IAAMC,EAAS,GACfC,OAAOC,QAAQC,KAAaP,SAAQ,YAAkB,IAAhBC,EAAe,KAATO,EAAS,KACjDJ,EAAOH,GAAQO,KAInB,IAAMC,EAAW,SAAC,GAAc,IAAD,IAAXC,KAMPC,YAJLC,EAFuB,EAEvBA,iBACAC,EAHuB,EAGvBA,mBACAC,EAJuB,EAIvBA,cACAC,EALuB,EAKvBA,gBAEJ,OACIH,GACAC,GACAC,GACAC,GAGFC,EAAgB,SAACC,EAAQC,GAC3B,IAAMC,EACFC,SAASH,EAAOP,KAAKC,YAAYU,iBAAmB,EAClDC,EACFF,SAASF,EAAOR,KAAKC,YAAYU,iBAAmB,EAExD,OAAIC,IAAoBH,EACbG,EAAkBH,EAGdF,EAAOP,KAAKC,YAAYY,MACxBL,EAAOR,KAAKC,YAAYY,MAEd,GAAK,GAG5BC,EAAc,UAAG7B,EAAK8B,gBAAR,iBAAG,EAAeC,aAAlB,aAAG,EACjBC,OAAOlB,GACRmB,KAAKZ,GACJa,EAAe,UAAGlC,EAAK8B,gBAAR,iBAAG,EAAeC,aAAlB,aAAG,EAClBC,QAAO,SAACG,GAAD,OAAcrB,EAASqB,MAC/BF,KAAKZ,GAGJe,EAAe,SAAC,GAAc,IAAZrB,EAAW,EAAXA,KAAW,EACFA,EAAKC,YAA1BY,EADuB,EACvBA,MAAOS,EADgB,EAChBA,UACf,OACI,kBAAC,IAAD,CACIF,QAASpB,EACTuB,WAAYpC,EAASmC,GACrBE,SAAY9B,EAAO4B,GACnBG,IAAKZ,KAMXa,IAAgB,GAClBC,GAAI,gBAAGC,EAAH,EAAGA,SAAaC,E,oIAAhB,wBACA,kBAAC,IAAD,eACIC,QAAQ,YACRC,UAAU,KACVC,MAAM,gBACNC,UAAWpD,GACPgD,GAEHD,IAGTM,IAAK,SAACL,GAAD,OAAW,kBAAC,IAAeA,IAChCM,GAAI,gBAAGP,EAAH,EAAGA,SAAH,OACA,kBAAC,IAAD,CAAYE,QAAQ,KAAKM,cAAY,GACjC,kBAAC,IAAD,CAAYC,GAAIC,YAAOV,EAAS,KAAMA,KAG9CW,QAAS,gBAAGX,EAAH,EAAGA,SAAUY,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,MAAtB,OACL,kBAAC,IAAD,CAAYX,QAAQ,MAChB,kBAAC,IAAD,CAAYO,GAAOC,YAAOV,EAAS,IAArB,YAAoCY,GAC7CC,GAASA,GAAS,GAAKA,GAAS,GAC7B,8BAAUvD,EAAOuD,EAAQ,GAAzB,KAEHb,OAIZ,mBAAoB,WACjB,OAAOd,EAAe4B,IAAIrB,IA7BZ,EA+BjB,oBAAqB,WAClB,OAAOF,EAAgBuB,IAAIrB,IAhCb,GAqCtB,OACI,kBAAC,IAAD,CAAYR,MAAO,WACf,kBAAC,IAAD,CACIA,MAAO,cACP8B,SAAU1D,EAAKuD,QACfI,WAAYlB,O,qBCvI5BjD,EAAOC,QAAU,IAA0B,2D,ojBCA3CD,EAAOC,QAAU,IAA0B,4D,qBCA3CD,EAAOC,QAAU,IAA0B,wD,qBCA3CD,EAAOC,QAAU,IAA0B,0D,qBCA3CD,EAAOC,QAAU,IAA0B","file":"component---src-pages-gallery-jsx-0a4c504d1868bcb79860.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/final_project-7ec0b017ec4644a210ca56a186800420.gif\";","// Library imports\nimport React from 'react';\nimport { graphql } from 'gatsby';\n// Project imports\nimport {\n    AnchorLink,\n    PageLayout,\n    HoverImage,\n    MarkdownPage,\n    Project,\n} from 'components';\nimport { urlify } from 'utils';\nimport { ProjectGIFs } from 'gifs';\n// UI imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst galleryStyles = makeStyles(() => ({\n    textOverflow: {\n        overflowWrap: 'break-word',\n    },\n}));\n\n// Generate gallery from markdown content\nfunction Gallery({ data }) {\n    // Custom class\n    const { textOverflow } = galleryStyles();\n\n    // Emoji prizes\n    const prizes = ['🥇', '🥈', '🥉', '🌟', '⭐', '✨'];\n\n    // Build image map for projects\n    const imageMap = {};\n    data.projectImages.nodes.forEach(({ name, childImageSharp }) => {\n        imageMap[name] = childImageSharp.fluid;\n    });\n    const gifMap = {};\n    Object.entries(ProjectGIFs).forEach(([name, gif]) => {\n        gifMap[name] = gif;\n    });\n\n    // Seperate out award winning projects\n    const isWinner = ({ node }) => {\n        const {\n            instructorAwards,\n            instructorMentions,\n            studentAwards,\n            studentMentions,\n        } = node.frontmatter;\n        return (\n            instructorAwards ||\n            instructorMentions ||\n            studentAwards ||\n            studentMentions\n        );\n    };\n    const visibilityCmp = (propsA, propsB) => {\n        const visibilityRankA =\n            parseInt(propsA.node.frontmatter.visibilityRank) || 0;\n        const visibilityRankB =\n            parseInt(propsB.node.frontmatter.visibilityRank) || 0;\n\n        if (visibilityRankB !== visibilityRankA) {\n            return visibilityRankB - visibilityRankA;\n        }\n\n        const titleA = propsA.node.frontmatter.title;\n        const titleB = propsB.node.frontmatter.title;\n\n        return titleA > titleB ? 1 : -1;\n    };\n\n    const projectWinners = data.projects?.edges\n        ?.filter(isWinner)\n        .sort(visibilityCmp);\n    const projectMentions = data.projects?.edges\n        ?.filter((project) => !isWinner(project))\n        .sort(visibilityCmp);\n\n    // Function to turn projects into JSX\n    const makeProjects = ({ node }) => {\n        const { title, imageName } = node.frontmatter;\n        return (\n            <Project\n                project={node}\n                fluidImage={imageMap[imageName]}\n                gifImage = {gifMap[imageName]}\n                key={title}\n            />\n        );\n    };\n\n    // Custom components to generate from markdown html\n    const customComponents = {\n        td: ({ children, ...props }) => (\n            <Typography\n                variant='subtitle1'\n                component='td'\n                color='textSecondary'\n                className={textOverflow}\n                {...props}\n            >\n                {children}\n            </Typography>\n        ),\n        img: (props) => <HoverImage {...props} />,\n        h3: ({ children }) => (\n            <Typography variant='h5' gutterBottom>\n                <AnchorLink id={urlify(children[0])}>{children}</AnchorLink>\n            </Typography>\n        ),\n        student: ({ children, gallery, place }) => (\n            <Typography variant='h6'>\n                <AnchorLink id={`${urlify(children[0])}-gallery-${gallery}`}>\n                    {place && place >= 1 && place <= 6 && (\n                        <span>{`${prizes[place - 1]} `}</span>\n                    )}\n                    {children}\n                </AnchorLink>\n            </Typography>\n        ),\n        ['project-winners']: () => {\n            return projectWinners.map(makeProjects);\n        },\n        ['project-mentions']: () => {\n            return projectMentions.map(makeProjects);\n        },\n    };\n\n    // Render\n    return (\n        <PageLayout title={'Gallery'}>\n            <MarkdownPage\n                title={'Art Gallery'}\n                markdown={data.gallery}\n                components={customComponents}\n            />\n        </PageLayout>\n    );\n}\n\n// Query markdown content\nexport const pageQuery = graphql`\n    query {\n        gallery: markdownRemark(\n            fileAbsolutePath: {regex: \"/Gallery\\\\/Gallery\\\\.md$/\"}\n        ) {\n            htmlAst\n            headings {\n              value\n              depth\n            }\n        }\n\n        projects: allMarkdownRemark(\n            filter: {\n                fileAbsolutePath: {regex: \"/\\\\/src\\\\/content\\\\/Gallery\\\\/projects/.*\\\\.md$/\"}\n            }\n        ) {\n            edges {\n                node {\n                    htmlAst\n                    frontmatter {\n                        title\n                        authors\n                        imageName\n                        demoURL\n                        repoURL\n                        writeupURL\n                        visibilityRank\n                        instructorAwards\n                        instructorMentions\n                        studentAwards\n                        studentMentions\n                    }\n                }\n            }\n        }\n        projectImages: allFile(\n            filter: {\n                sourceInstanceName: { eq: \"projects\" }\n                relativeDirectory: { eq: \"images\" }\n            }\n        ) {\n            nodes {\n                name\n                childImageSharp {\n                    fluid(maxWidth: 480, quality: 100) {\n                        ...GatsbyImageSharpFluid_withWebp\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport default Gallery;\n","module.exports = __webpack_public_path__ + \"static/dream_world-426c3f3d9492f14805a2de9b3f55f3aa.gif\";","module.exports = __webpack_public_path__ + \"static/assignment_1-ea0b552d1f6083fe1a6a449ad234aed9.gif\";","module.exports = __webpack_public_path__ + \"static/cat_dash-e1d1f083ad824378c82a563875262420.gif\";","module.exports = __webpack_public_path__ + \"static/drivers_ed-1591849e1c21ae9c46d12a236b29d63c.gif\";","module.exports = __webpack_public_path__ + \"static/assignment_5-ff93435bae4e25669b3a6370dad5ffa9.gif\";"],"sourceRoot":""}